// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: h2mod.proto

#ifndef PROTOBUF_h2mod_2eproto__INCLUDED
#define PROTOBUF_h2mod_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_h2mod_2eproto();
void protobuf_AssignDesc_h2mod_2eproto();
void protobuf_ShutdownFile_h2mod_2eproto();

class H2ModPacket;
class h2mod_set_grenade;
class h2mod_set_team;
class h2mod_map_info;
class h2mod_lobby_settings;
class StringMap_FieldEntry;
class h2mod_map_checksum_state;

enum H2ModPacket_Type {
  H2ModPacket_Type_set_player_team = 2,
  H2ModPacket_Type_set_unit_grenades = 3,
  H2ModPacket_Type_map_info_request = 4,
  H2ModPacket_Type_set_lobby_settings = 5
};
bool H2ModPacket_Type_IsValid(int value);
const H2ModPacket_Type H2ModPacket_Type_Type_MIN = H2ModPacket_Type_set_player_team;
const H2ModPacket_Type H2ModPacket_Type_Type_MAX = H2ModPacket_Type_set_lobby_settings;
const int H2ModPacket_Type_Type_ARRAYSIZE = H2ModPacket_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* H2ModPacket_Type_descriptor();
inline const ::std::string& H2ModPacket_Type_Name(H2ModPacket_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    H2ModPacket_Type_descriptor(), value);
}
inline bool H2ModPacket_Type_Parse(
    const ::std::string& name, H2ModPacket_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<H2ModPacket_Type>(
    H2ModPacket_Type_descriptor(), name, value);
}
// ===================================================================

class H2ModPacket : public ::google::protobuf::Message {
 public:
  H2ModPacket();
  virtual ~H2ModPacket();

  H2ModPacket(const H2ModPacket& from);

  inline H2ModPacket& operator=(const H2ModPacket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const H2ModPacket& default_instance();

  void Swap(H2ModPacket* other);

  // implements Message ----------------------------------------------

  H2ModPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const H2ModPacket& from);
  void MergeFrom(const H2ModPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef H2ModPacket_Type Type;
  static const Type set_player_team = H2ModPacket_Type_set_player_team;
  static const Type set_unit_grenades = H2ModPacket_Type_set_unit_grenades;
  static const Type map_info_request = H2ModPacket_Type_map_info_request;
  static const Type set_lobby_settings = H2ModPacket_Type_set_lobby_settings;
  static inline bool Type_IsValid(int value) {
    return H2ModPacket_Type_IsValid(value);
  }
  static const Type Type_MIN =
    H2ModPacket_Type_Type_MIN;
  static const Type Type_MAX =
    H2ModPacket_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    H2ModPacket_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return H2ModPacket_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return H2ModPacket_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return H2ModPacket_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .H2ModPacket.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::H2ModPacket_Type type() const;
  inline void set_type(::H2ModPacket_Type value);

  // optional .h2mod_set_team h2_set_player_team = 2;
  inline bool has_h2_set_player_team() const;
  inline void clear_h2_set_player_team();
  static const int kH2SetPlayerTeamFieldNumber = 2;
  inline const ::h2mod_set_team& h2_set_player_team() const;
  inline ::h2mod_set_team* mutable_h2_set_player_team();
  inline ::h2mod_set_team* release_h2_set_player_team();
  inline void set_allocated_h2_set_player_team(::h2mod_set_team* h2_set_player_team);

  // optional .h2mod_set_grenade set_grenade = 3;
  inline bool has_set_grenade() const;
  inline void clear_set_grenade();
  static const int kSetGrenadeFieldNumber = 3;
  inline const ::h2mod_set_grenade& set_grenade() const;
  inline ::h2mod_set_grenade* mutable_set_grenade();
  inline ::h2mod_set_grenade* release_set_grenade();
  inline void set_allocated_set_grenade(::h2mod_set_grenade* set_grenade);

  // optional .h2mod_map_info map_info = 4;
  inline bool has_map_info() const;
  inline void clear_map_info();
  static const int kMapInfoFieldNumber = 4;
  inline const ::h2mod_map_info& map_info() const;
  inline ::h2mod_map_info* mutable_map_info();
  inline ::h2mod_map_info* release_map_info();
  inline void set_allocated_map_info(::h2mod_map_info* map_info);

  // optional .h2mod_lobby_settings lobby_settings = 5;
  inline bool has_lobby_settings() const;
  inline void clear_lobby_settings();
  static const int kLobbySettingsFieldNumber = 5;
  inline const ::h2mod_lobby_settings& lobby_settings() const;
  inline ::h2mod_lobby_settings* mutable_lobby_settings();
  inline ::h2mod_lobby_settings* release_lobby_settings();
  inline void set_allocated_lobby_settings(::h2mod_lobby_settings* lobby_settings);

  // @@protoc_insertion_point(class_scope:H2ModPacket)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_h2_set_player_team();
  inline void clear_has_h2_set_player_team();
  inline void set_has_set_grenade();
  inline void clear_has_set_grenade();
  inline void set_has_map_info();
  inline void clear_has_map_info();
  inline void set_has_lobby_settings();
  inline void clear_has_lobby_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::h2mod_set_team* h2_set_player_team_;
  ::h2mod_set_grenade* set_grenade_;
  ::h2mod_map_info* map_info_;
  ::h2mod_lobby_settings* lobby_settings_;
  int type_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static H2ModPacket* default_instance_;
};
// -------------------------------------------------------------------

class h2mod_set_grenade : public ::google::protobuf::Message {
 public:
  h2mod_set_grenade();
  virtual ~h2mod_set_grenade();

  h2mod_set_grenade(const h2mod_set_grenade& from);

  inline h2mod_set_grenade& operator=(const h2mod_set_grenade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const h2mod_set_grenade& default_instance();

  void Swap(h2mod_set_grenade* other);

  // implements Message ----------------------------------------------

  h2mod_set_grenade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const h2mod_set_grenade& from);
  void MergeFrom(const h2mod_set_grenade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 pIndex = 3;
  inline bool has_pindex() const;
  inline void clear_pindex();
  static const int kPIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 pindex() const;
  inline void set_pindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:h2mod_set_grenade)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_pindex();
  inline void clear_has_pindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 pindex_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static h2mod_set_grenade* default_instance_;
};
// -------------------------------------------------------------------

class h2mod_set_team : public ::google::protobuf::Message {
 public:
  h2mod_set_team();
  virtual ~h2mod_set_team();

  h2mod_set_team(const h2mod_set_team& from);

  inline h2mod_set_team& operator=(const h2mod_set_team& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const h2mod_set_team& default_instance();

  void Swap(h2mod_set_team* other);

  // implements Message ----------------------------------------------

  h2mod_set_team* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const h2mod_set_team& from);
  void MergeFrom(const h2mod_set_team& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 peerIndex = 1;
  inline bool has_peerindex() const;
  inline void clear_peerindex();
  static const int kPeerIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 peerindex() const;
  inline void set_peerindex(::google::protobuf::uint32 value);

  // required uint32 team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline ::google::protobuf::uint32 team() const;
  inline void set_team(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:h2mod_set_team)
 private:
  inline void set_has_peerindex();
  inline void clear_has_peerindex();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 peerindex_;
  ::google::protobuf::uint32 team_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static h2mod_set_team* default_instance_;
};
// -------------------------------------------------------------------

class h2mod_map_info : public ::google::protobuf::Message {
 public:
  h2mod_map_info();
  virtual ~h2mod_map_info();

  h2mod_map_info(const h2mod_map_info& from);

  inline h2mod_map_info& operator=(const h2mod_map_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const h2mod_map_info& default_instance();

  void Swap(h2mod_map_info* other);

  // implements Message ----------------------------------------------

  h2mod_map_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const h2mod_map_info& from);
  void MergeFrom(const h2mod_map_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mapFileName = 1;
  inline bool has_mapfilename() const;
  inline void clear_mapfilename();
  static const int kMapFileNameFieldNumber = 1;
  inline const ::std::string& mapfilename() const;
  inline void set_mapfilename(const ::std::string& value);
  inline void set_mapfilename(const char* value);
  inline void set_mapfilename(const char* value, size_t size);
  inline ::std::string* mutable_mapfilename();
  inline ::std::string* release_mapfilename();
  inline void set_allocated_mapfilename(::std::string* mapfilename);

  // required uint32 mapSize = 2;
  inline bool has_mapsize() const;
  inline void clear_mapsize();
  static const int kMapSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 mapsize() const;
  inline void set_mapsize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:h2mod_map_info)
 private:
  inline void set_has_mapfilename();
  inline void clear_has_mapfilename();
  inline void set_has_mapsize();
  inline void clear_has_mapsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mapfilename_;
  ::google::protobuf::uint32 mapsize_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static h2mod_map_info* default_instance_;
};
// -------------------------------------------------------------------

class h2mod_lobby_settings : public ::google::protobuf::Message {
 public:
  h2mod_lobby_settings();
  virtual ~h2mod_lobby_settings();

  h2mod_lobby_settings(const h2mod_lobby_settings& from);

  inline h2mod_lobby_settings& operator=(const h2mod_lobby_settings& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const h2mod_lobby_settings& default_instance();

  void Swap(h2mod_lobby_settings* other);

  // implements Message ----------------------------------------------

  h2mod_lobby_settings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const h2mod_lobby_settings& from);
  void MergeFrom(const h2mod_lobby_settings& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 mp_explosion_physics = 1;
  inline bool has_mp_explosion_physics() const;
  inline void clear_mp_explosion_physics();
  static const int kMpExplosionPhysicsFieldNumber = 1;
  inline ::google::protobuf::uint32 mp_explosion_physics() const;
  inline void set_mp_explosion_physics(::google::protobuf::uint32 value);

  // required uint32 mp_sputnik = 2;
  inline bool has_mp_sputnik() const;
  inline void clear_mp_sputnik();
  static const int kMpSputnikFieldNumber = 2;
  inline ::google::protobuf::uint32 mp_sputnik() const;
  inline void set_mp_sputnik(::google::protobuf::uint32 value);

  // required uint32 mp_grunt_bday_party = 3;
  inline bool has_mp_grunt_bday_party() const;
  inline void clear_mp_grunt_bday_party();
  static const int kMpGruntBdayPartyFieldNumber = 3;
  inline ::google::protobuf::uint32 mp_grunt_bday_party() const;
  inline void set_mp_grunt_bday_party(::google::protobuf::uint32 value);

  // required uint32 grenade_chain_react = 4;
  inline bool has_grenade_chain_react() const;
  inline void clear_grenade_chain_react();
  static const int kGrenadeChainReactFieldNumber = 4;
  inline ::google::protobuf::uint32 grenade_chain_react() const;
  inline void set_grenade_chain_react(::google::protobuf::uint32 value);

  // required uint32 banshee_bomb = 5;
  inline bool has_banshee_bomb() const;
  inline void clear_banshee_bomb();
  static const int kBansheeBombFieldNumber = 5;
  inline ::google::protobuf::uint32 banshee_bomb() const;
  inline void set_banshee_bomb(::google::protobuf::uint32 value);

  // required uint32 mp_blind = 6;
  inline bool has_mp_blind() const;
  inline void clear_mp_blind();
  static const int kMpBlindFieldNumber = 6;
  inline ::google::protobuf::uint32 mp_blind() const;
  inline void set_mp_blind(::google::protobuf::uint32 value);

  // required uint32 flashlight = 7;
  inline bool has_flashlight() const;
  inline void clear_flashlight();
  static const int kFlashlightFieldNumber = 7;
  inline ::google::protobuf::uint32 flashlight() const;
  inline void set_flashlight(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:h2mod_lobby_settings)
 private:
  inline void set_has_mp_explosion_physics();
  inline void clear_has_mp_explosion_physics();
  inline void set_has_mp_sputnik();
  inline void clear_has_mp_sputnik();
  inline void set_has_mp_grunt_bday_party();
  inline void clear_has_mp_grunt_bday_party();
  inline void set_has_grenade_chain_react();
  inline void clear_has_grenade_chain_react();
  inline void set_has_banshee_bomb();
  inline void clear_has_banshee_bomb();
  inline void set_has_mp_blind();
  inline void clear_has_mp_blind();
  inline void set_has_flashlight();
  inline void clear_has_flashlight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mp_explosion_physics_;
  ::google::protobuf::uint32 mp_sputnik_;
  ::google::protobuf::uint32 mp_grunt_bday_party_;
  ::google::protobuf::uint32 grenade_chain_react_;
  ::google::protobuf::uint32 banshee_bomb_;
  ::google::protobuf::uint32 mp_blind_;
  ::google::protobuf::uint32 flashlight_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static h2mod_lobby_settings* default_instance_;
};
// -------------------------------------------------------------------

class StringMap_FieldEntry : public ::google::protobuf::Message {
 public:
  StringMap_FieldEntry();
  virtual ~StringMap_FieldEntry();

  StringMap_FieldEntry(const StringMap_FieldEntry& from);

  inline StringMap_FieldEntry& operator=(const StringMap_FieldEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMap_FieldEntry& default_instance();

  void Swap(StringMap_FieldEntry* other);

  // implements Message ----------------------------------------------

  StringMap_FieldEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringMap_FieldEntry& from);
  void MergeFrom(const StringMap_FieldEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:StringMap_FieldEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static StringMap_FieldEntry* default_instance_;
};
// -------------------------------------------------------------------

class h2mod_map_checksum_state : public ::google::protobuf::Message {
 public:
  h2mod_map_checksum_state();
  virtual ~h2mod_map_checksum_state();

  h2mod_map_checksum_state(const h2mod_map_checksum_state& from);

  inline h2mod_map_checksum_state& operator=(const h2mod_map_checksum_state& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const h2mod_map_checksum_state& default_instance();

  void Swap(h2mod_map_checksum_state* other);

  // implements Message ----------------------------------------------

  h2mod_map_checksum_state* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const h2mod_map_checksum_state& from);
  void MergeFrom(const h2mod_map_checksum_state& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool is_offical = 1;
  inline bool has_is_offical() const;
  inline void clear_is_offical();
  static const int kIsOfficalFieldNumber = 1;
  inline bool is_offical() const;
  inline void set_is_offical(bool value);

  // repeated .StringMap_FieldEntry map_checksum_list = 2;
  inline int map_checksum_list_size() const;
  inline void clear_map_checksum_list();
  static const int kMapChecksumListFieldNumber = 2;
  inline const ::StringMap_FieldEntry& map_checksum_list(int index) const;
  inline ::StringMap_FieldEntry* mutable_map_checksum_list(int index);
  inline ::StringMap_FieldEntry* add_map_checksum_list();
  inline const ::google::protobuf::RepeatedPtrField< ::StringMap_FieldEntry >&
      map_checksum_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::StringMap_FieldEntry >*
      mutable_map_checksum_list();

  // @@protoc_insertion_point(class_scope:h2mod_map_checksum_state)
 private:
  inline void set_has_is_offical();
  inline void clear_has_is_offical();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::StringMap_FieldEntry > map_checksum_list_;
  bool is_offical_;
  friend void  protobuf_AddDesc_h2mod_2eproto();
  friend void protobuf_AssignDesc_h2mod_2eproto();
  friend void protobuf_ShutdownFile_h2mod_2eproto();

  void InitAsDefaultInstance();
  static h2mod_map_checksum_state* default_instance_;
};
// ===================================================================


// ===================================================================

// H2ModPacket

// required .H2ModPacket.Type type = 1;
inline bool H2ModPacket::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void H2ModPacket::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void H2ModPacket::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void H2ModPacket::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::H2ModPacket_Type H2ModPacket::type() const {
  // @@protoc_insertion_point(field_get:H2ModPacket.type)
  return static_cast< ::H2ModPacket_Type >(type_);
}
inline void H2ModPacket::set_type(::H2ModPacket_Type value) {
  assert(::H2ModPacket_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:H2ModPacket.type)
}

// optional .h2mod_set_team h2_set_player_team = 2;
inline bool H2ModPacket::has_h2_set_player_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void H2ModPacket::set_has_h2_set_player_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void H2ModPacket::clear_has_h2_set_player_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void H2ModPacket::clear_h2_set_player_team() {
  if (h2_set_player_team_ != NULL) h2_set_player_team_->::h2mod_set_team::Clear();
  clear_has_h2_set_player_team();
}
inline const ::h2mod_set_team& H2ModPacket::h2_set_player_team() const {
  // @@protoc_insertion_point(field_get:H2ModPacket.h2_set_player_team)
  return h2_set_player_team_ != NULL ? *h2_set_player_team_ : *default_instance_->h2_set_player_team_;
}
inline ::h2mod_set_team* H2ModPacket::mutable_h2_set_player_team() {
  set_has_h2_set_player_team();
  if (h2_set_player_team_ == NULL) h2_set_player_team_ = new ::h2mod_set_team;
  // @@protoc_insertion_point(field_mutable:H2ModPacket.h2_set_player_team)
  return h2_set_player_team_;
}
inline ::h2mod_set_team* H2ModPacket::release_h2_set_player_team() {
  clear_has_h2_set_player_team();
  ::h2mod_set_team* temp = h2_set_player_team_;
  h2_set_player_team_ = NULL;
  return temp;
}
inline void H2ModPacket::set_allocated_h2_set_player_team(::h2mod_set_team* h2_set_player_team) {
  delete h2_set_player_team_;
  h2_set_player_team_ = h2_set_player_team;
  if (h2_set_player_team) {
    set_has_h2_set_player_team();
  } else {
    clear_has_h2_set_player_team();
  }
  // @@protoc_insertion_point(field_set_allocated:H2ModPacket.h2_set_player_team)
}

// optional .h2mod_set_grenade set_grenade = 3;
inline bool H2ModPacket::has_set_grenade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void H2ModPacket::set_has_set_grenade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void H2ModPacket::clear_has_set_grenade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void H2ModPacket::clear_set_grenade() {
  if (set_grenade_ != NULL) set_grenade_->::h2mod_set_grenade::Clear();
  clear_has_set_grenade();
}
inline const ::h2mod_set_grenade& H2ModPacket::set_grenade() const {
  // @@protoc_insertion_point(field_get:H2ModPacket.set_grenade)
  return set_grenade_ != NULL ? *set_grenade_ : *default_instance_->set_grenade_;
}
inline ::h2mod_set_grenade* H2ModPacket::mutable_set_grenade() {
  set_has_set_grenade();
  if (set_grenade_ == NULL) set_grenade_ = new ::h2mod_set_grenade;
  // @@protoc_insertion_point(field_mutable:H2ModPacket.set_grenade)
  return set_grenade_;
}
inline ::h2mod_set_grenade* H2ModPacket::release_set_grenade() {
  clear_has_set_grenade();
  ::h2mod_set_grenade* temp = set_grenade_;
  set_grenade_ = NULL;
  return temp;
}
inline void H2ModPacket::set_allocated_set_grenade(::h2mod_set_grenade* set_grenade) {
  delete set_grenade_;
  set_grenade_ = set_grenade;
  if (set_grenade) {
    set_has_set_grenade();
  } else {
    clear_has_set_grenade();
  }
  // @@protoc_insertion_point(field_set_allocated:H2ModPacket.set_grenade)
}

// optional .h2mod_map_info map_info = 4;
inline bool H2ModPacket::has_map_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void H2ModPacket::set_has_map_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void H2ModPacket::clear_has_map_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void H2ModPacket::clear_map_info() {
  if (map_info_ != NULL) map_info_->::h2mod_map_info::Clear();
  clear_has_map_info();
}
inline const ::h2mod_map_info& H2ModPacket::map_info() const {
  // @@protoc_insertion_point(field_get:H2ModPacket.map_info)
  return map_info_ != NULL ? *map_info_ : *default_instance_->map_info_;
}
inline ::h2mod_map_info* H2ModPacket::mutable_map_info() {
  set_has_map_info();
  if (map_info_ == NULL) map_info_ = new ::h2mod_map_info;
  // @@protoc_insertion_point(field_mutable:H2ModPacket.map_info)
  return map_info_;
}
inline ::h2mod_map_info* H2ModPacket::release_map_info() {
  clear_has_map_info();
  ::h2mod_map_info* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline void H2ModPacket::set_allocated_map_info(::h2mod_map_info* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    set_has_map_info();
  } else {
    clear_has_map_info();
  }
  // @@protoc_insertion_point(field_set_allocated:H2ModPacket.map_info)
}

// optional .h2mod_lobby_settings lobby_settings = 5;
inline bool H2ModPacket::has_lobby_settings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void H2ModPacket::set_has_lobby_settings() {
  _has_bits_[0] |= 0x00000010u;
}
inline void H2ModPacket::clear_has_lobby_settings() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void H2ModPacket::clear_lobby_settings() {
  if (lobby_settings_ != NULL) lobby_settings_->::h2mod_lobby_settings::Clear();
  clear_has_lobby_settings();
}
inline const ::h2mod_lobby_settings& H2ModPacket::lobby_settings() const {
  // @@protoc_insertion_point(field_get:H2ModPacket.lobby_settings)
  return lobby_settings_ != NULL ? *lobby_settings_ : *default_instance_->lobby_settings_;
}
inline ::h2mod_lobby_settings* H2ModPacket::mutable_lobby_settings() {
  set_has_lobby_settings();
  if (lobby_settings_ == NULL) lobby_settings_ = new ::h2mod_lobby_settings;
  // @@protoc_insertion_point(field_mutable:H2ModPacket.lobby_settings)
  return lobby_settings_;
}
inline ::h2mod_lobby_settings* H2ModPacket::release_lobby_settings() {
  clear_has_lobby_settings();
  ::h2mod_lobby_settings* temp = lobby_settings_;
  lobby_settings_ = NULL;
  return temp;
}
inline void H2ModPacket::set_allocated_lobby_settings(::h2mod_lobby_settings* lobby_settings) {
  delete lobby_settings_;
  lobby_settings_ = lobby_settings;
  if (lobby_settings) {
    set_has_lobby_settings();
  } else {
    clear_has_lobby_settings();
  }
  // @@protoc_insertion_point(field_set_allocated:H2ModPacket.lobby_settings)
}

// -------------------------------------------------------------------

// h2mod_set_grenade

// required uint32 type = 1;
inline bool h2mod_set_grenade::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void h2mod_set_grenade::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void h2mod_set_grenade::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void h2mod_set_grenade::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 h2mod_set_grenade::type() const {
  // @@protoc_insertion_point(field_get:h2mod_set_grenade.type)
  return type_;
}
inline void h2mod_set_grenade::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:h2mod_set_grenade.type)
}

// required uint32 count = 2;
inline bool h2mod_set_grenade::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void h2mod_set_grenade::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void h2mod_set_grenade::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void h2mod_set_grenade::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 h2mod_set_grenade::count() const {
  // @@protoc_insertion_point(field_get:h2mod_set_grenade.count)
  return count_;
}
inline void h2mod_set_grenade::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:h2mod_set_grenade.count)
}

// required uint32 pIndex = 3;
inline bool h2mod_set_grenade::has_pindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void h2mod_set_grenade::set_has_pindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void h2mod_set_grenade::clear_has_pindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void h2mod_set_grenade::clear_pindex() {
  pindex_ = 0u;
  clear_has_pindex();
}
inline ::google::protobuf::uint32 h2mod_set_grenade::pindex() const {
  // @@protoc_insertion_point(field_get:h2mod_set_grenade.pIndex)
  return pindex_;
}
inline void h2mod_set_grenade::set_pindex(::google::protobuf::uint32 value) {
  set_has_pindex();
  pindex_ = value;
  // @@protoc_insertion_point(field_set:h2mod_set_grenade.pIndex)
}

// -------------------------------------------------------------------

// h2mod_set_team

// required uint32 peerIndex = 1;
inline bool h2mod_set_team::has_peerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void h2mod_set_team::set_has_peerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void h2mod_set_team::clear_has_peerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void h2mod_set_team::clear_peerindex() {
  peerindex_ = 0u;
  clear_has_peerindex();
}
inline ::google::protobuf::uint32 h2mod_set_team::peerindex() const {
  // @@protoc_insertion_point(field_get:h2mod_set_team.peerIndex)
  return peerindex_;
}
inline void h2mod_set_team::set_peerindex(::google::protobuf::uint32 value) {
  set_has_peerindex();
  peerindex_ = value;
  // @@protoc_insertion_point(field_set:h2mod_set_team.peerIndex)
}

// required uint32 team = 2;
inline bool h2mod_set_team::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void h2mod_set_team::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void h2mod_set_team::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void h2mod_set_team::clear_team() {
  team_ = 0u;
  clear_has_team();
}
inline ::google::protobuf::uint32 h2mod_set_team::team() const {
  // @@protoc_insertion_point(field_get:h2mod_set_team.team)
  return team_;
}
inline void h2mod_set_team::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:h2mod_set_team.team)
}

// -------------------------------------------------------------------

// h2mod_map_info

// required string mapFileName = 1;
inline bool h2mod_map_info::has_mapfilename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void h2mod_map_info::set_has_mapfilename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void h2mod_map_info::clear_has_mapfilename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void h2mod_map_info::clear_mapfilename() {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_->clear();
  }
  clear_has_mapfilename();
}
inline const ::std::string& h2mod_map_info::mapfilename() const {
  // @@protoc_insertion_point(field_get:h2mod_map_info.mapFileName)
  return *mapfilename_;
}
inline void h2mod_map_info::set_mapfilename(const ::std::string& value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set:h2mod_map_info.mapFileName)
}
inline void h2mod_map_info::set_mapfilename(const char* value) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:h2mod_map_info.mapFileName)
}
inline void h2mod_map_info::set_mapfilename(const char* value, size_t size) {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  mapfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:h2mod_map_info.mapFileName)
}
inline ::std::string* h2mod_map_info::mutable_mapfilename() {
  set_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mapfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:h2mod_map_info.mapFileName)
  return mapfilename_;
}
inline ::std::string* h2mod_map_info::release_mapfilename() {
  clear_has_mapfilename();
  if (mapfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mapfilename_;
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void h2mod_map_info::set_allocated_mapfilename(::std::string* mapfilename) {
  if (mapfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapfilename_;
  }
  if (mapfilename) {
    set_has_mapfilename();
    mapfilename_ = mapfilename;
  } else {
    clear_has_mapfilename();
    mapfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:h2mod_map_info.mapFileName)
}

// required uint32 mapSize = 2;
inline bool h2mod_map_info::has_mapsize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void h2mod_map_info::set_has_mapsize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void h2mod_map_info::clear_has_mapsize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void h2mod_map_info::clear_mapsize() {
  mapsize_ = 0u;
  clear_has_mapsize();
}
inline ::google::protobuf::uint32 h2mod_map_info::mapsize() const {
  // @@protoc_insertion_point(field_get:h2mod_map_info.mapSize)
  return mapsize_;
}
inline void h2mod_map_info::set_mapsize(::google::protobuf::uint32 value) {
  set_has_mapsize();
  mapsize_ = value;
  // @@protoc_insertion_point(field_set:h2mod_map_info.mapSize)
}

// -------------------------------------------------------------------

// h2mod_lobby_settings

// required uint32 mp_explosion_physics = 1;
inline bool h2mod_lobby_settings::has_mp_explosion_physics() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void h2mod_lobby_settings::set_has_mp_explosion_physics() {
  _has_bits_[0] |= 0x00000001u;
}
inline void h2mod_lobby_settings::clear_has_mp_explosion_physics() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void h2mod_lobby_settings::clear_mp_explosion_physics() {
  mp_explosion_physics_ = 0u;
  clear_has_mp_explosion_physics();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::mp_explosion_physics() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.mp_explosion_physics)
  return mp_explosion_physics_;
}
inline void h2mod_lobby_settings::set_mp_explosion_physics(::google::protobuf::uint32 value) {
  set_has_mp_explosion_physics();
  mp_explosion_physics_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.mp_explosion_physics)
}

// required uint32 mp_sputnik = 2;
inline bool h2mod_lobby_settings::has_mp_sputnik() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void h2mod_lobby_settings::set_has_mp_sputnik() {
  _has_bits_[0] |= 0x00000002u;
}
inline void h2mod_lobby_settings::clear_has_mp_sputnik() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void h2mod_lobby_settings::clear_mp_sputnik() {
  mp_sputnik_ = 0u;
  clear_has_mp_sputnik();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::mp_sputnik() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.mp_sputnik)
  return mp_sputnik_;
}
inline void h2mod_lobby_settings::set_mp_sputnik(::google::protobuf::uint32 value) {
  set_has_mp_sputnik();
  mp_sputnik_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.mp_sputnik)
}

// required uint32 mp_grunt_bday_party = 3;
inline bool h2mod_lobby_settings::has_mp_grunt_bday_party() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void h2mod_lobby_settings::set_has_mp_grunt_bday_party() {
  _has_bits_[0] |= 0x00000004u;
}
inline void h2mod_lobby_settings::clear_has_mp_grunt_bday_party() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void h2mod_lobby_settings::clear_mp_grunt_bday_party() {
  mp_grunt_bday_party_ = 0u;
  clear_has_mp_grunt_bday_party();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::mp_grunt_bday_party() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.mp_grunt_bday_party)
  return mp_grunt_bday_party_;
}
inline void h2mod_lobby_settings::set_mp_grunt_bday_party(::google::protobuf::uint32 value) {
  set_has_mp_grunt_bday_party();
  mp_grunt_bday_party_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.mp_grunt_bday_party)
}

// required uint32 grenade_chain_react = 4;
inline bool h2mod_lobby_settings::has_grenade_chain_react() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void h2mod_lobby_settings::set_has_grenade_chain_react() {
  _has_bits_[0] |= 0x00000008u;
}
inline void h2mod_lobby_settings::clear_has_grenade_chain_react() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void h2mod_lobby_settings::clear_grenade_chain_react() {
  grenade_chain_react_ = 0u;
  clear_has_grenade_chain_react();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::grenade_chain_react() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.grenade_chain_react)
  return grenade_chain_react_;
}
inline void h2mod_lobby_settings::set_grenade_chain_react(::google::protobuf::uint32 value) {
  set_has_grenade_chain_react();
  grenade_chain_react_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.grenade_chain_react)
}

// required uint32 banshee_bomb = 5;
inline bool h2mod_lobby_settings::has_banshee_bomb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void h2mod_lobby_settings::set_has_banshee_bomb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void h2mod_lobby_settings::clear_has_banshee_bomb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void h2mod_lobby_settings::clear_banshee_bomb() {
  banshee_bomb_ = 0u;
  clear_has_banshee_bomb();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::banshee_bomb() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.banshee_bomb)
  return banshee_bomb_;
}
inline void h2mod_lobby_settings::set_banshee_bomb(::google::protobuf::uint32 value) {
  set_has_banshee_bomb();
  banshee_bomb_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.banshee_bomb)
}

// required uint32 mp_blind = 6;
inline bool h2mod_lobby_settings::has_mp_blind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void h2mod_lobby_settings::set_has_mp_blind() {
  _has_bits_[0] |= 0x00000020u;
}
inline void h2mod_lobby_settings::clear_has_mp_blind() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void h2mod_lobby_settings::clear_mp_blind() {
  mp_blind_ = 0u;
  clear_has_mp_blind();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::mp_blind() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.mp_blind)
  return mp_blind_;
}
inline void h2mod_lobby_settings::set_mp_blind(::google::protobuf::uint32 value) {
  set_has_mp_blind();
  mp_blind_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.mp_blind)
}

// required uint32 flashlight = 7;
inline bool h2mod_lobby_settings::has_flashlight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void h2mod_lobby_settings::set_has_flashlight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void h2mod_lobby_settings::clear_has_flashlight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void h2mod_lobby_settings::clear_flashlight() {
  flashlight_ = 0u;
  clear_has_flashlight();
}
inline ::google::protobuf::uint32 h2mod_lobby_settings::flashlight() const {
  // @@protoc_insertion_point(field_get:h2mod_lobby_settings.flashlight)
  return flashlight_;
}
inline void h2mod_lobby_settings::set_flashlight(::google::protobuf::uint32 value) {
  set_has_flashlight();
  flashlight_ = value;
  // @@protoc_insertion_point(field_set:h2mod_lobby_settings.flashlight)
}

// -------------------------------------------------------------------

// StringMap_FieldEntry

// optional string key = 1;
inline bool StringMap_FieldEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StringMap_FieldEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StringMap_FieldEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StringMap_FieldEntry::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& StringMap_FieldEntry::key() const {
  // @@protoc_insertion_point(field_get:StringMap_FieldEntry.key)
  return *key_;
}
inline void StringMap_FieldEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:StringMap_FieldEntry.key)
}
inline void StringMap_FieldEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:StringMap_FieldEntry.key)
}
inline void StringMap_FieldEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StringMap_FieldEntry.key)
}
inline ::std::string* StringMap_FieldEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:StringMap_FieldEntry.key)
  return key_;
}
inline ::std::string* StringMap_FieldEntry::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringMap_FieldEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:StringMap_FieldEntry.key)
}

// optional string value = 2;
inline bool StringMap_FieldEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StringMap_FieldEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StringMap_FieldEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StringMap_FieldEntry::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& StringMap_FieldEntry::value() const {
  // @@protoc_insertion_point(field_get:StringMap_FieldEntry.value)
  return *value_;
}
inline void StringMap_FieldEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:StringMap_FieldEntry.value)
}
inline void StringMap_FieldEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:StringMap_FieldEntry.value)
}
inline void StringMap_FieldEntry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:StringMap_FieldEntry.value)
}
inline ::std::string* StringMap_FieldEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:StringMap_FieldEntry.value)
  return value_;
}
inline ::std::string* StringMap_FieldEntry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StringMap_FieldEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:StringMap_FieldEntry.value)
}

// -------------------------------------------------------------------

// h2mod_map_checksum_state

// required bool is_offical = 1;
inline bool h2mod_map_checksum_state::has_is_offical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void h2mod_map_checksum_state::set_has_is_offical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void h2mod_map_checksum_state::clear_has_is_offical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void h2mod_map_checksum_state::clear_is_offical() {
  is_offical_ = false;
  clear_has_is_offical();
}
inline bool h2mod_map_checksum_state::is_offical() const {
  // @@protoc_insertion_point(field_get:h2mod_map_checksum_state.is_offical)
  return is_offical_;
}
inline void h2mod_map_checksum_state::set_is_offical(bool value) {
  set_has_is_offical();
  is_offical_ = value;
  // @@protoc_insertion_point(field_set:h2mod_map_checksum_state.is_offical)
}

// repeated .StringMap_FieldEntry map_checksum_list = 2;
inline int h2mod_map_checksum_state::map_checksum_list_size() const {
  return map_checksum_list_.size();
}
inline void h2mod_map_checksum_state::clear_map_checksum_list() {
  map_checksum_list_.Clear();
}
inline const ::StringMap_FieldEntry& h2mod_map_checksum_state::map_checksum_list(int index) const {
  // @@protoc_insertion_point(field_get:h2mod_map_checksum_state.map_checksum_list)
  return map_checksum_list_.Get(index);
}
inline ::StringMap_FieldEntry* h2mod_map_checksum_state::mutable_map_checksum_list(int index) {
  // @@protoc_insertion_point(field_mutable:h2mod_map_checksum_state.map_checksum_list)
  return map_checksum_list_.Mutable(index);
}
inline ::StringMap_FieldEntry* h2mod_map_checksum_state::add_map_checksum_list() {
  // @@protoc_insertion_point(field_add:h2mod_map_checksum_state.map_checksum_list)
  return map_checksum_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::StringMap_FieldEntry >&
h2mod_map_checksum_state::map_checksum_list() const {
  // @@protoc_insertion_point(field_list:h2mod_map_checksum_state.map_checksum_list)
  return map_checksum_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::StringMap_FieldEntry >*
h2mod_map_checksum_state::mutable_map_checksum_list() {
  // @@protoc_insertion_point(field_mutable_list:h2mod_map_checksum_state.map_checksum_list)
  return &map_checksum_list_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::H2ModPacket_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::H2ModPacket_Type>() {
  return ::H2ModPacket_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_h2mod_2eproto__INCLUDED
